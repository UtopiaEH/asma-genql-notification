schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "notifications"
  """
  delete_notifications(
    """filter the rows which have to be deleted"""
    where: notifications_bool_exp!
  ): notifications_mutation_response

  """
  delete single row from the table: "notifications"
  """
  delete_notifications_by_pk(id: uuid!): notifications

  """
  delete data from the table: "service"
  """
  delete_service(
    """filter the rows which have to be deleted"""
    where: service_bool_exp!
  ): service_mutation_response

  """
  delete single row from the table: "service"
  """
  delete_service_by_pk(name: String!): service

  """
  delete data from the table: "services"
  """
  delete_services(
    """filter the rows which have to be deleted"""
    where: services_bool_exp!
  ): services_mutation_response

  """
  delete single row from the table: "services"
  """
  delete_services_by_pk(id: uuid!): services

  """
  delete data from the table: "severity"
  """
  delete_severity(
    """filter the rows which have to be deleted"""
    where: severity_bool_exp!
  ): severity_mutation_response

  """
  delete single row from the table: "severity"
  """
  delete_severity_by_pk(name: String!): severity

  """
  delete data from the table: "trigger"
  """
  delete_trigger(
    """filter the rows which have to be deleted"""
    where: trigger_bool_exp!
  ): trigger_mutation_response

  """
  delete single row from the table: "trigger"
  """
  delete_trigger_by_pk(name: String!): trigger

  """
  insert data into the table: "notifications"
  """
  insert_notifications(
    """the rows to be inserted"""
    objects: [notifications_insert_input!]!

    """on conflict condition"""
    on_conflict: notifications_on_conflict
  ): notifications_mutation_response

  """
  insert a single row into the table: "notifications"
  """
  insert_notifications_one(
    """the row to be inserted"""
    object: notifications_insert_input!

    """on conflict condition"""
    on_conflict: notifications_on_conflict
  ): notifications

  """
  insert data into the table: "service"
  """
  insert_service(
    """the rows to be inserted"""
    objects: [service_insert_input!]!

    """on conflict condition"""
    on_conflict: service_on_conflict
  ): service_mutation_response

  """
  insert a single row into the table: "service"
  """
  insert_service_one(
    """the row to be inserted"""
    object: service_insert_input!

    """on conflict condition"""
    on_conflict: service_on_conflict
  ): service

  """
  insert data into the table: "services"
  """
  insert_services(
    """the rows to be inserted"""
    objects: [services_insert_input!]!

    """on conflict condition"""
    on_conflict: services_on_conflict
  ): services_mutation_response

  """
  insert a single row into the table: "services"
  """
  insert_services_one(
    """the row to be inserted"""
    object: services_insert_input!

    """on conflict condition"""
    on_conflict: services_on_conflict
  ): services

  """
  insert data into the table: "severity"
  """
  insert_severity(
    """the rows to be inserted"""
    objects: [severity_insert_input!]!

    """on conflict condition"""
    on_conflict: severity_on_conflict
  ): severity_mutation_response

  """
  insert a single row into the table: "severity"
  """
  insert_severity_one(
    """the row to be inserted"""
    object: severity_insert_input!

    """on conflict condition"""
    on_conflict: severity_on_conflict
  ): severity

  """
  insert data into the table: "trigger"
  """
  insert_trigger(
    """the rows to be inserted"""
    objects: [trigger_insert_input!]!

    """on conflict condition"""
    on_conflict: trigger_on_conflict
  ): trigger_mutation_response

  """
  insert a single row into the table: "trigger"
  """
  insert_trigger_one(
    """the row to be inserted"""
    object: trigger_insert_input!

    """on conflict condition"""
    on_conflict: trigger_on_conflict
  ): trigger

  """
  update data of the table: "notifications"
  """
  update_notifications(
    """sets the columns of the filtered rows to the given values"""
    _set: notifications_set_input

    """filter the rows which have to be updated"""
    where: notifications_bool_exp!
  ): notifications_mutation_response

  """
  update single row of the table: "notifications"
  """
  update_notifications_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: notifications_set_input
    pk_columns: notifications_pk_columns_input!
  ): notifications

  """
  update data of the table: "service"
  """
  update_service(
    """sets the columns of the filtered rows to the given values"""
    _set: service_set_input

    """filter the rows which have to be updated"""
    where: service_bool_exp!
  ): service_mutation_response

  """
  update single row of the table: "service"
  """
  update_service_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: service_set_input
    pk_columns: service_pk_columns_input!
  ): service

  """
  update data of the table: "services"
  """
  update_services(
    """sets the columns of the filtered rows to the given values"""
    _set: services_set_input

    """filter the rows which have to be updated"""
    where: services_bool_exp!
  ): services_mutation_response

  """
  update single row of the table: "services"
  """
  update_services_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: services_set_input
    pk_columns: services_pk_columns_input!
  ): services

  """
  update data of the table: "severity"
  """
  update_severity(
    """sets the columns of the filtered rows to the given values"""
    _set: severity_set_input

    """filter the rows which have to be updated"""
    where: severity_bool_exp!
  ): severity_mutation_response

  """
  update single row of the table: "severity"
  """
  update_severity_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: severity_set_input
    pk_columns: severity_pk_columns_input!
  ): severity

  """
  update data of the table: "trigger"
  """
  update_trigger(
    """sets the columns of the filtered rows to the given values"""
    _set: trigger_set_input

    """filter the rows which have to be updated"""
    where: trigger_bool_exp!
  ): trigger_mutation_response

  """
  update single row of the table: "trigger"
  """
  update_trigger_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: trigger_set_input
    pk_columns: trigger_pk_columns_input!
  ): trigger
}

"""
columns and relationships of "notifications"
"""
type notifications {
  created_at: timestamptz!
  deleted_at: timestamptz
  id: uuid!
  message: String!
  seen: Boolean!

  """An object relationship"""
  service: services!
  service_id: uuid!
  subject_id: uuid!
  title: String!
  trigger: trigger_enum!
  updated_at: timestamptz!
}

"""
aggregated selection of "notifications"
"""
type notifications_aggregate {
  aggregate: notifications_aggregate_fields
  nodes: [notifications!]!
}

"""
aggregate fields of "notifications"
"""
type notifications_aggregate_fields {
  count(columns: [notifications_select_column!], distinct: Boolean): Int!
  max: notifications_max_fields
  min: notifications_min_fields
}

"""
order by aggregate values of table "notifications"
"""
input notifications_aggregate_order_by {
  count: order_by
  max: notifications_max_order_by
  min: notifications_min_order_by
}

"""
input type for inserting array relation for remote table "notifications"
"""
input notifications_arr_rel_insert_input {
  data: [notifications_insert_input!]!

  """on conflict condition"""
  on_conflict: notifications_on_conflict
}

"""
Boolean expression to filter rows from the table "notifications". All fields are combined with a logical 'AND'.
"""
input notifications_bool_exp {
  _and: [notifications_bool_exp!]
  _not: notifications_bool_exp
  _or: [notifications_bool_exp!]
  created_at: timestamptz_comparison_exp
  deleted_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  message: String_comparison_exp
  seen: Boolean_comparison_exp
  service: services_bool_exp
  service_id: uuid_comparison_exp
  subject_id: uuid_comparison_exp
  title: String_comparison_exp
  trigger: trigger_enum_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "notifications"
"""
enum notifications_constraint {
  """unique or primary key constraint"""
  notifications_pkey
}

"""
input type for inserting data into table "notifications"
"""
input notifications_insert_input {
  created_at: timestamptz
  deleted_at: timestamptz
  id: uuid
  message: String
  seen: Boolean
  service: services_obj_rel_insert_input
  service_id: uuid
  subject_id: uuid
  title: String
  trigger: trigger_enum
  updated_at: timestamptz
}

"""aggregate max on columns"""
type notifications_max_fields {
  created_at: timestamptz
  deleted_at: timestamptz
  id: uuid
  message: String
  service_id: uuid
  subject_id: uuid
  title: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "notifications"
"""
input notifications_max_order_by {
  created_at: order_by
  deleted_at: order_by
  id: order_by
  message: order_by
  service_id: order_by
  subject_id: order_by
  title: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type notifications_min_fields {
  created_at: timestamptz
  deleted_at: timestamptz
  id: uuid
  message: String
  service_id: uuid
  subject_id: uuid
  title: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "notifications"
"""
input notifications_min_order_by {
  created_at: order_by
  deleted_at: order_by
  id: order_by
  message: order_by
  service_id: order_by
  subject_id: order_by
  title: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "notifications"
"""
type notifications_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [notifications!]!
}

"""
on conflict condition type for table "notifications"
"""
input notifications_on_conflict {
  constraint: notifications_constraint!
  update_columns: [notifications_update_column!]! = []
  where: notifications_bool_exp
}

"""Ordering options when selecting data from "notifications"."""
input notifications_order_by {
  created_at: order_by
  deleted_at: order_by
  id: order_by
  message: order_by
  seen: order_by
  service: services_order_by
  service_id: order_by
  subject_id: order_by
  title: order_by
  trigger: order_by
  updated_at: order_by
}

"""primary key columns input for table: notifications"""
input notifications_pk_columns_input {
  id: uuid!
}

"""
select columns of table "notifications"
"""
enum notifications_select_column {
  """column name"""
  created_at

  """column name"""
  deleted_at

  """column name"""
  id

  """column name"""
  message

  """column name"""
  seen

  """column name"""
  service_id

  """column name"""
  subject_id

  """column name"""
  title

  """column name"""
  trigger

  """column name"""
  updated_at
}

"""
input type for updating data in table "notifications"
"""
input notifications_set_input {
  created_at: timestamptz
  deleted_at: timestamptz
  id: uuid
  message: String
  seen: Boolean
  service_id: uuid
  subject_id: uuid
  title: String
  trigger: trigger_enum
  updated_at: timestamptz
}

"""
update columns of table "notifications"
"""
enum notifications_update_column {
  """column name"""
  created_at

  """column name"""
  deleted_at

  """column name"""
  id

  """column name"""
  message

  """column name"""
  seen

  """column name"""
  service_id

  """column name"""
  subject_id

  """column name"""
  title

  """column name"""
  trigger

  """column name"""
  updated_at
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "notifications"
  """
  notifications(
    """distinct select on columns"""
    distinct_on: [notifications_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [notifications_order_by!]

    """filter the rows returned"""
    where: notifications_bool_exp
  ): [notifications!]!

  """An aggregate relationship"""
  notifications_aggregate(
    """distinct select on columns"""
    distinct_on: [notifications_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [notifications_order_by!]

    """filter the rows returned"""
    where: notifications_bool_exp
  ): notifications_aggregate!

  """fetch data from the table: "notifications" using primary key columns"""
  notifications_by_pk(id: uuid!): notifications

  """
  fetch data from the table: "service"
  """
  service(
    """distinct select on columns"""
    distinct_on: [service_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [service_order_by!]

    """filter the rows returned"""
    where: service_bool_exp
  ): [service!]!

  """
  fetch aggregated fields from the table: "service"
  """
  service_aggregate(
    """distinct select on columns"""
    distinct_on: [service_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [service_order_by!]

    """filter the rows returned"""
    where: service_bool_exp
  ): service_aggregate!

  """fetch data from the table: "service" using primary key columns"""
  service_by_pk(name: String!): service

  """
  fetch data from the table: "services"
  """
  services(
    """distinct select on columns"""
    distinct_on: [services_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [services_order_by!]

    """filter the rows returned"""
    where: services_bool_exp
  ): [services!]!

  """
  fetch aggregated fields from the table: "services"
  """
  services_aggregate(
    """distinct select on columns"""
    distinct_on: [services_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [services_order_by!]

    """filter the rows returned"""
    where: services_bool_exp
  ): services_aggregate!

  """fetch data from the table: "services" using primary key columns"""
  services_by_pk(id: uuid!): services

  """
  fetch data from the table: "severity"
  """
  severity(
    """distinct select on columns"""
    distinct_on: [severity_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [severity_order_by!]

    """filter the rows returned"""
    where: severity_bool_exp
  ): [severity!]!

  """
  fetch aggregated fields from the table: "severity"
  """
  severity_aggregate(
    """distinct select on columns"""
    distinct_on: [severity_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [severity_order_by!]

    """filter the rows returned"""
    where: severity_bool_exp
  ): severity_aggregate!

  """fetch data from the table: "severity" using primary key columns"""
  severity_by_pk(name: String!): severity

  """
  fetch data from the table: "trigger"
  """
  trigger(
    """distinct select on columns"""
    distinct_on: [trigger_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [trigger_order_by!]

    """filter the rows returned"""
    where: trigger_bool_exp
  ): [trigger!]!

  """
  fetch aggregated fields from the table: "trigger"
  """
  trigger_aggregate(
    """distinct select on columns"""
    distinct_on: [trigger_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [trigger_order_by!]

    """filter the rows returned"""
    where: trigger_bool_exp
  ): trigger_aggregate!

  """fetch data from the table: "trigger" using primary key columns"""
  trigger_by_pk(name: String!): trigger
}

"""
columns and relationships of "service"
"""
type service {
  description: String!
  name: String!
}

"""
aggregated selection of "service"
"""
type service_aggregate {
  aggregate: service_aggregate_fields
  nodes: [service!]!
}

"""
aggregate fields of "service"
"""
type service_aggregate_fields {
  count(columns: [service_select_column!], distinct: Boolean): Int!
  max: service_max_fields
  min: service_min_fields
}

"""
Boolean expression to filter rows from the table "service". All fields are combined with a logical 'AND'.
"""
input service_bool_exp {
  _and: [service_bool_exp!]
  _not: service_bool_exp
  _or: [service_bool_exp!]
  description: String_comparison_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "service"
"""
enum service_constraint {
  """unique or primary key constraint"""
  service_pkey
}

enum service_enum {
  """"""
  async_chat

  """"""
  calendar

  """"""
  qnr
}

"""
Boolean expression to compare columns of type "service_enum". All fields are combined with logical 'AND'.
"""
input service_enum_comparison_exp {
  _eq: service_enum
  _in: [service_enum!]
  _is_null: Boolean
  _neq: service_enum
  _nin: [service_enum!]
}

"""
input type for inserting data into table "service"
"""
input service_insert_input {
  description: String
  name: String
}

"""aggregate max on columns"""
type service_max_fields {
  description: String
  name: String
}

"""aggregate min on columns"""
type service_min_fields {
  description: String
  name: String
}

"""
response of any mutation on the table "service"
"""
type service_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [service!]!
}

"""
on conflict condition type for table "service"
"""
input service_on_conflict {
  constraint: service_constraint!
  update_columns: [service_update_column!]! = []
  where: service_bool_exp
}

"""Ordering options when selecting data from "service"."""
input service_order_by {
  description: order_by
  name: order_by
}

"""primary key columns input for table: service"""
input service_pk_columns_input {
  name: String!
}

"""
select columns of table "service"
"""
enum service_select_column {
  """column name"""
  description

  """column name"""
  name
}

"""
input type for updating data in table "service"
"""
input service_set_input {
  description: String
  name: String
}

"""
update columns of table "service"
"""
enum service_update_column {
  """column name"""
  description

  """column name"""
  name
}

"""
columns and relationships of "services"
"""
type services {
  created_at: timestamptz!
  customer_id: uuid
  email_channel: Boolean!
  enabled: Boolean!
  id: uuid!
  message: String!

  """
  fetch data from the table: "notifications"
  """
  notifications(
    """distinct select on columns"""
    distinct_on: [notifications_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [notifications_order_by!]

    """filter the rows returned"""
    where: notifications_bool_exp
  ): [notifications!]!

  """An aggregate relationship"""
  notifications_aggregate(
    """distinct select on columns"""
    distinct_on: [notifications_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [notifications_order_by!]

    """filter the rows returned"""
    where: notifications_bool_exp
  ): notifications_aggregate!
  push_channel: Boolean!
  service: service_enum!
  sms_channel: Boolean!
  title: String!
  updated_at: timestamptz!
  user_id: uuid!
}

"""
aggregated selection of "services"
"""
type services_aggregate {
  aggregate: services_aggregate_fields
  nodes: [services!]!
}

"""
aggregate fields of "services"
"""
type services_aggregate_fields {
  count(columns: [services_select_column!], distinct: Boolean): Int!
  max: services_max_fields
  min: services_min_fields
}

"""
Boolean expression to filter rows from the table "services". All fields are combined with a logical 'AND'.
"""
input services_bool_exp {
  _and: [services_bool_exp!]
  _not: services_bool_exp
  _or: [services_bool_exp!]
  created_at: timestamptz_comparison_exp
  customer_id: uuid_comparison_exp
  email_channel: Boolean_comparison_exp
  enabled: Boolean_comparison_exp
  id: uuid_comparison_exp
  message: String_comparison_exp
  notifications: notifications_bool_exp
  push_channel: Boolean_comparison_exp
  service: service_enum_comparison_exp
  sms_channel: Boolean_comparison_exp
  title: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "services"
"""
enum services_constraint {
  """unique or primary key constraint"""
  services_pkey
}

"""
input type for inserting data into table "services"
"""
input services_insert_input {
  created_at: timestamptz
  customer_id: uuid
  email_channel: Boolean
  enabled: Boolean
  id: uuid
  message: String
  notifications: notifications_arr_rel_insert_input
  push_channel: Boolean
  service: service_enum
  sms_channel: Boolean
  title: String
  updated_at: timestamptz
  user_id: uuid
}

"""aggregate max on columns"""
type services_max_fields {
  created_at: timestamptz
  customer_id: uuid
  id: uuid
  message: String
  title: String
  updated_at: timestamptz
  user_id: uuid
}

"""aggregate min on columns"""
type services_min_fields {
  created_at: timestamptz
  customer_id: uuid
  id: uuid
  message: String
  title: String
  updated_at: timestamptz
  user_id: uuid
}

"""
response of any mutation on the table "services"
"""
type services_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [services!]!
}

"""
input type for inserting object relation for remote table "services"
"""
input services_obj_rel_insert_input {
  data: services_insert_input!

  """on conflict condition"""
  on_conflict: services_on_conflict
}

"""
on conflict condition type for table "services"
"""
input services_on_conflict {
  constraint: services_constraint!
  update_columns: [services_update_column!]! = []
  where: services_bool_exp
}

"""Ordering options when selecting data from "services"."""
input services_order_by {
  created_at: order_by
  customer_id: order_by
  email_channel: order_by
  enabled: order_by
  id: order_by
  message: order_by
  notifications_aggregate: notifications_aggregate_order_by
  push_channel: order_by
  service: order_by
  sms_channel: order_by
  title: order_by
  updated_at: order_by
  user_id: order_by
}

"""primary key columns input for table: services"""
input services_pk_columns_input {
  id: uuid!
}

"""
select columns of table "services"
"""
enum services_select_column {
  """column name"""
  created_at

  """column name"""
  customer_id

  """column name"""
  email_channel

  """column name"""
  enabled

  """column name"""
  id

  """column name"""
  message

  """column name"""
  push_channel

  """column name"""
  service

  """column name"""
  sms_channel

  """column name"""
  title

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""
input type for updating data in table "services"
"""
input services_set_input {
  created_at: timestamptz
  customer_id: uuid
  email_channel: Boolean
  enabled: Boolean
  id: uuid
  message: String
  push_channel: Boolean
  service: service_enum
  sms_channel: Boolean
  title: String
  updated_at: timestamptz
  user_id: uuid
}

"""
update columns of table "services"
"""
enum services_update_column {
  """column name"""
  created_at

  """column name"""
  customer_id

  """column name"""
  email_channel

  """column name"""
  enabled

  """column name"""
  id

  """column name"""
  message

  """column name"""
  push_channel

  """column name"""
  service

  """column name"""
  sms_channel

  """column name"""
  title

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""
columns and relationships of "severity"
"""
type severity {
  description: String!
  name: String!
}

"""
aggregated selection of "severity"
"""
type severity_aggregate {
  aggregate: severity_aggregate_fields
  nodes: [severity!]!
}

"""
aggregate fields of "severity"
"""
type severity_aggregate_fields {
  count(columns: [severity_select_column!], distinct: Boolean): Int!
  max: severity_max_fields
  min: severity_min_fields
}

"""
Boolean expression to filter rows from the table "severity". All fields are combined with a logical 'AND'.
"""
input severity_bool_exp {
  _and: [severity_bool_exp!]
  _not: severity_bool_exp
  _or: [severity_bool_exp!]
  description: String_comparison_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "severity"
"""
enum severity_constraint {
  """unique or primary key constraint"""
  severity_pkey
}

"""
input type for inserting data into table "severity"
"""
input severity_insert_input {
  description: String
  name: String
}

"""aggregate max on columns"""
type severity_max_fields {
  description: String
  name: String
}

"""aggregate min on columns"""
type severity_min_fields {
  description: String
  name: String
}

"""
response of any mutation on the table "severity"
"""
type severity_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [severity!]!
}

"""
on conflict condition type for table "severity"
"""
input severity_on_conflict {
  constraint: severity_constraint!
  update_columns: [severity_update_column!]! = []
  where: severity_bool_exp
}

"""Ordering options when selecting data from "severity"."""
input severity_order_by {
  description: order_by
  name: order_by
}

"""primary key columns input for table: severity"""
input severity_pk_columns_input {
  name: String!
}

"""
select columns of table "severity"
"""
enum severity_select_column {
  """column name"""
  description

  """column name"""
  name
}

"""
input type for updating data in table "severity"
"""
input severity_set_input {
  description: String
  name: String
}

"""
update columns of table "severity"
"""
enum severity_update_column {
  """column name"""
  description

  """column name"""
  name
}

type subscription_root {
  """
  fetch data from the table: "notifications"
  """
  notifications(
    """distinct select on columns"""
    distinct_on: [notifications_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [notifications_order_by!]

    """filter the rows returned"""
    where: notifications_bool_exp
  ): [notifications!]!

  """An aggregate relationship"""
  notifications_aggregate(
    """distinct select on columns"""
    distinct_on: [notifications_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [notifications_order_by!]

    """filter the rows returned"""
    where: notifications_bool_exp
  ): notifications_aggregate!

  """fetch data from the table: "notifications" using primary key columns"""
  notifications_by_pk(id: uuid!): notifications

  """
  fetch data from the table: "service"
  """
  service(
    """distinct select on columns"""
    distinct_on: [service_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [service_order_by!]

    """filter the rows returned"""
    where: service_bool_exp
  ): [service!]!

  """
  fetch aggregated fields from the table: "service"
  """
  service_aggregate(
    """distinct select on columns"""
    distinct_on: [service_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [service_order_by!]

    """filter the rows returned"""
    where: service_bool_exp
  ): service_aggregate!

  """fetch data from the table: "service" using primary key columns"""
  service_by_pk(name: String!): service

  """
  fetch data from the table: "services"
  """
  services(
    """distinct select on columns"""
    distinct_on: [services_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [services_order_by!]

    """filter the rows returned"""
    where: services_bool_exp
  ): [services!]!

  """
  fetch aggregated fields from the table: "services"
  """
  services_aggregate(
    """distinct select on columns"""
    distinct_on: [services_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [services_order_by!]

    """filter the rows returned"""
    where: services_bool_exp
  ): services_aggregate!

  """fetch data from the table: "services" using primary key columns"""
  services_by_pk(id: uuid!): services

  """
  fetch data from the table: "severity"
  """
  severity(
    """distinct select on columns"""
    distinct_on: [severity_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [severity_order_by!]

    """filter the rows returned"""
    where: severity_bool_exp
  ): [severity!]!

  """
  fetch aggregated fields from the table: "severity"
  """
  severity_aggregate(
    """distinct select on columns"""
    distinct_on: [severity_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [severity_order_by!]

    """filter the rows returned"""
    where: severity_bool_exp
  ): severity_aggregate!

  """fetch data from the table: "severity" using primary key columns"""
  severity_by_pk(name: String!): severity

  """
  fetch data from the table: "trigger"
  """
  trigger(
    """distinct select on columns"""
    distinct_on: [trigger_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [trigger_order_by!]

    """filter the rows returned"""
    where: trigger_bool_exp
  ): [trigger!]!

  """
  fetch aggregated fields from the table: "trigger"
  """
  trigger_aggregate(
    """distinct select on columns"""
    distinct_on: [trigger_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [trigger_order_by!]

    """filter the rows returned"""
    where: trigger_bool_exp
  ): trigger_aggregate!

  """fetch data from the table: "trigger" using primary key columns"""
  trigger_by_pk(name: String!): trigger
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "trigger"
"""
type trigger {
  name: String!
}

"""
aggregated selection of "trigger"
"""
type trigger_aggregate {
  aggregate: trigger_aggregate_fields
  nodes: [trigger!]!
}

"""
aggregate fields of "trigger"
"""
type trigger_aggregate_fields {
  count(columns: [trigger_select_column!], distinct: Boolean): Int!
  max: trigger_max_fields
  min: trigger_min_fields
}

"""
Boolean expression to filter rows from the table "trigger". All fields are combined with a logical 'AND'.
"""
input trigger_bool_exp {
  _and: [trigger_bool_exp!]
  _not: trigger_bool_exp
  _or: [trigger_bool_exp!]
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "trigger"
"""
enum trigger_constraint {
  """unique or primary key constraint"""
  trigger_pkey
}

enum trigger_enum {
  insert_ticket
  insert_ticket_message
}

"""
Boolean expression to compare columns of type "trigger_enum". All fields are combined with logical 'AND'.
"""
input trigger_enum_comparison_exp {
  _eq: trigger_enum
  _in: [trigger_enum!]
  _is_null: Boolean
  _neq: trigger_enum
  _nin: [trigger_enum!]
}

"""
input type for inserting data into table "trigger"
"""
input trigger_insert_input {
  name: String
}

"""aggregate max on columns"""
type trigger_max_fields {
  name: String
}

"""aggregate min on columns"""
type trigger_min_fields {
  name: String
}

"""
response of any mutation on the table "trigger"
"""
type trigger_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [trigger!]!
}

"""
on conflict condition type for table "trigger"
"""
input trigger_on_conflict {
  constraint: trigger_constraint!
  update_columns: [trigger_update_column!]! = []
  where: trigger_bool_exp
}

"""Ordering options when selecting data from "trigger"."""
input trigger_order_by {
  name: order_by
}

"""primary key columns input for table: trigger"""
input trigger_pk_columns_input {
  name: String!
}

"""
select columns of table "trigger"
"""
enum trigger_select_column {
  """column name"""
  name
}

"""
input type for updating data in table "trigger"
"""
input trigger_set_input {
  name: String
}

"""
update columns of table "trigger"
"""
enum trigger_update_column {
  """column name"""
  name
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}
